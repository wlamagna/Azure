# Imagine you have created an ADO yaml to execute a pipe-line like single script
# I just did that to automate some imaginary tasks.  Since i am #opentowork i use
# my imagination to practice, i hope someone needs real solutions some day so i have
# the chance to be there and have a job again.

param (
  [string] $CLI = "99",
  [string] $EMAIL = "pepe@comodo.com
)

# Oh, yeah, here some mix between VBScript and trying to automate the acquisition of a token:
# Not perfect but saved me time
while (($bearer -eq "") -or (!$bearer)) {
  $cmd = Read-Host "You need a User bearer. Shall i try to get one ?"
  if (($cmd -eq "y") -or ($cmd -eq "yes")) {
    Start-Process microsoft-edge:https://piripipi/Auth -WindowStyle maximized
    Sleep 5
    Start-Process microsoft-edge:https://piripipi/api/authentication -WindowStyle maximized
    Sleep 3
    $wshell = New-Object -ComObject wscript.shell;
    $wshell.SendKeys("{TAB}")
    $wshell.SendKeys("{TAB}")
    $wshell.SendKeys('^a')
    $wShell.SendKeys('^c')
    Sleep 1
    $pepe=$(Get-Clipboard)
    $wshell.SendKeys('^w')
    $wshell.SendKeys('^w')
    $pepe -match '.*"token": "(.*)",.*'
    $tmpchar = $matches[1]
    $bearer = $tmpchar
    $global:bearer=$tmpchar
  }
}

Write-Host "Read: $email"
$personalToken = "laikit?"
$patToken = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes(":$($personalToken)"))

$headers = @{
  Authorization = "Basic " + $patToken
  Accept = "text/html;api-version=5.1-preview.1;excludeUrls=true;enumsAsNumbers=true;msDateFormat=true;noArrayWrap=true"
}
$payload = '
{
  "stagesToSkip": [],
  "resources": {
    "repositories": {
      "self": {
        "refName": "refs/heads/master"
      }
    }
  },
  "variables": {
    "CLIENTID": {
      "value":"' + $CLI + '"
    }, "EMAIL": {
      "value":"' + $EMAIL + '"
    },
    "BEARER":{
      "value":"' + $bearer + '"
    }
  }
}
'

$repoUrl = "https://open2work.visualstudio.com/b15acda5-3883-3882-473s-acjkdjojf/_apis/pipelines/2677/runs"
# Run the pipeline :
$output = Invoke-RestMethod -Uri $repoUrl -Method Post -Headers $headers -Body $payload -ContentType 'application/json'

# Wait until it completes:

do {
  $ongoing = Invoke-RestMethod -Uri $output.url -Method Get -Headers $headers
  Write-Host -NoNewLine "."
  Start-Sleep -Seconds 3
} while ($ongoing.state -eq "inProgress")


